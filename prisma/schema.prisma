generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-3.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model user {
  userId Int @id @default(autoincrement())
  fullname String
  cpf String @unique
  account account[]
}

model company {
  companyId Int @id @default(autoincrement())
  name String
  cnpj String @unique
  account account[]
}

model balanceType {
  balanceTypeId Int @id @default(autoincrement())
  name String
  slug String @unique
  mcc mcc[]

  accountBalance accountBalance[]
}

model mcc {
  mccId Int @id @default(autoincrement())
  code String @unique
  balanceTypeId Int
  balanceType balanceType @relation(fields: [balanceTypeId], references: [balanceTypeId])
  merchant merchant[]

  transaction transaction[]
}


model merchant {
  merchantId Int @id @default(autoincrement())
  name String @unique
  mccId Int
  mcc mcc @relation(fields: [mccId], references: [mccId])
}

model account {
  accountId Int @id @default(autoincrement())
  userId Int
  user user @relation(fields: [userId], references: [userId])
  companyId Int
  company company @relation(fields: [companyId], references: [companyId])
  accountBalance accountBalance[]

  @@unique([userId, companyId])
  transaction transaction[]
}

model accountBalance {
  accountBalanceId Int @id @default(autoincrement())
  accountId Int
  account account @relation(fields: [accountId], references: [accountId])
  balanceTypeId Int
  balanceType balanceType @relation(fields: [balanceTypeId], references: [balanceTypeId])
  balance Float

  @@unique([accountId, balanceTypeId])
}

model transaction {
  transactionId Int @id @default(autoincrement())
  accountId Int
  account account @relation(fields: [accountId], references: [accountId])
  mccId Int
  mcc mcc @relation(fields: [mccId], references: [mccId])
  amount Float
  merchantName String
  createdAt DateTime @default(now())
}